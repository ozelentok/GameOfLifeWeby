// Generated by CoffeeScript 1.3.3
(function() {
  var GE, germSim;

  GE = {};

  GE.Sim = (function() {
    var Const, LevelToColor;

    Const = {
      width: 600,
      squares: 100,
      FrameRate: 1000 / 20
    };

    Const.height = Const.width;

    Const.squareLen = Const.width / Const.squares;

    LevelToColor = ['#FFF', '#05F'];

    function Sim($canvas) {
      this.canvas = $canvas[0];
      this.ctx = this.canvas.getContext('2d');
      this.setSizes();
      this.setEvents();
      this.buildGrid();
      setInterval(this.tick.bind(this), Const.FrameRate);
    }

    Sim.prototype.buildGrid = function() {
      var i, j, _i, _ref;
      this.grid = [];
      this.nextGrid = [];
      for (i = _i = 1, _ref = Const.squares; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.grid.push((function() {
          var _j, _ref1, _results;
          _results = [];
          for (j = _j = 1, _ref1 = Const.squares; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 1 <= _ref1 ? ++_j : --_j) {
            _results.push(0);
          }
          return _results;
        })());
        this.nextGrid.push((function() {
          var _j, _ref1, _results;
          _results = [];
          for (j = _j = 1, _ref1 = Const.squares; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 1 <= _ref1 ? ++_j : --_j) {
            _results.push(0);
          }
          return _results;
        })());
      }
    };

    Sim.prototype.drawGrid = function() {
      var i, j, _i, _j, _ref, _ref1;
      for (i = _i = 0, _ref = Const.squares; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = Const.squares; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          if (this.grid[i][j] === 1) {
            this.drawCell(i * Const.squareLen, j * Const.squareLen, LevelToColor[this.grid[i][j]]);
          }
        }
      }
    };

    Sim.prototype.drawCell = function(x, y, color) {
      this.ctx.fillRect(x, y, Const.squareLen, Const.squareLen);
    };

    Sim.prototype.advanceGerms = function() {
      var count, temp, x, y, _i, _j, _ref, _ref1;
      count = 0;
      for (x = _i = 0, _ref = Const.squares; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = Const.squares; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          count = this.countNeighbours(x, y);
          if (this.grid[x][y] === 1) {
            if (count <= 1 || count >= 4) {
              this.nextGrid[x][y] = 0;
            } else {
              this.nextGrid[x][y] = 1;
            }
          } else {
            if (count === 3) {
              this.nextGrid[x][y] = 1;
            } else {
              this.nextGrid[x][y] = this.grid[x][y];
            }
          }
        }
      }
      temp = this.grid;
      this.grid = this.nextGrid;
      this.nextGrid = temp;
    };

    Sim.prototype.countNeighbours = function(x, y) {
      var bottom, count, left, right, top;
      left = (x - 1) >= 0 ? x - 1 : Const.squares - 1;
      right = (x + 1) < Const.squares ? x + 1 : 0;
      top = (y - 1) >= 0 ? y - 1 : Const.squares - 1;
      bottom = (y + 1) < Const.squares ? y + 1 : 0;
      count = 0;
      count += this.grid[left][y];
      count += this.grid[left][top];
      count += this.grid[left][bottom];
      count += this.grid[right][y];
      count += this.grid[right][top];
      count += this.grid[right][bottom];
      count += this.grid[x][top];
      count += this.grid[x][bottom];
      return count;
    };

    Sim.prototype.tick = function() {
      this.ctx.clearRect(0, 0, Const.width, Const.height);
      this.advanceGerms();
      this.drawGrid();
    };

    Sim.prototype.setSizes = function() {
      this.canvas.width = Math.min($(window).width() - 40, Const.width);
      this.canvas.height = Math.min($(window).width() - 40, Const.height);
      Const.squareLen = this.canvas.width / Const.squares;
      this.ctx.fillStyle = '#0F0';
    };

    Sim.prototype.setEvents = function() {
      var _this = this;
      $(this.canvas).bind('mousedown', function() {
        $(_this.canvas).bind('mousemove', function(e) {
          var i, j;
          i = Math.floor((e.pageX - _this.canvas.offsetLeft) / Const.squareLen);
          j = Math.floor((e.pageY - _this.canvas.offsetTop) / Const.squareLen);
          _this.grid[i][j] = 1;
        });
      });
      $(this.canvas).bind('mouseleave mouseup', function(e) {
        $(_this.canvas).unbind('mousemove');
      });
      $(window).resize(function() {
        _this.setSizes();
      });
    };

    window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
      window.setTimeout(callback, Const.FrameRate);
    };

    return Sim;

  })();

  germSim = new GE.Sim($('#simview'));

}).call(this);
